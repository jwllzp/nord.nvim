local M = {}
local hi = require("nord.utils").hi

function M.setup(opts)
	opts = opts or {}

	hi("@variable", { link = "Identifier" })
	hi("@variable.builtin", { link = "Special" })
	hi("@variable.parameter", { link = "Identifier" })
	hi("@variable.member", { link = "Identifier" })
	hi("@constant", { link = "Constant" })
	hi("@constant.builtin", { link = "Special" })
	hi("@constant.macro", { link = "Macro" })
	hi("@module", { link = "Include" })
	hi("@label", { link = "Label" })
	hi("@string", { link = "String" })
	hi("@string.documentation", { link = "String" })
	hi("@string.regexp", { link = "String" })
	hi("@string.escape", { link = "SpecialChar" })
	hi("@string.special", { link = "SpecialChar" })
	hi("@string.special.path", { link = "String" })
	hi("@string.special.symbol", { link = "String" })
	hi("@string.special.url", { link = "String" })
	hi("@punctuation.delimiter.regex", { link = "Delimiter" })
	hi("@character", { link = "Character" })
	hi("@character.special", { link = "SpecialChar" })
	hi("@boolean", { link = "Boolean" })
	hi("@number", { link = "Number" })
	hi("@number.float", { link = "Float" })
	hi("@type", { link = "Type" })
	hi("@type.builtin", { link = "Type" })
	hi("@type.definition", { link = "Typedef" })
	hi("@attribute", { link = "PreProc" })
	hi("@property", { link = "Identifier" })
	hi("@function", { link = "Function" })
	hi("@function.builtin", { link = "Special" })
	hi("@function.call", { link = "Function" })
	hi("@function.macro", { link = "Macro" })
	hi("@function.method", { link = "Function" })
	hi("@function.method.call", { link = "Function" })
	hi("@constructor", { link = "Special" })
	hi("@operator", { link = "Operator" })
	hi("@keyword", { link = "Keyword" })
	hi("@keyword.modifier", { link = "Keyword" })
	hi("@keyword.type", { link = "Keyword" })
	hi("@keyword.coroutine", { link = "Keyword" })
	hi("@keyword.function", { link = "Keyword" })
	hi("@keyword.operator", { link = "Operator" })
	hi("@keyword.import", { link = "Include" })
	hi("@keyword.repeat", { link = "Repeat" })
	hi("@keyword.return", { link = "Keyword" })
	hi("@keyword.debug", { link = "Debug" })
	hi("@keyword.exception", { link = "Exception" })
	hi("@keyword.conditional", { link = "Conditional" })
	hi("@keyword.conditional.ternary", { link = "Conditional" })
	hi("@keyword.directive", { link = "PreProc" })
	hi("@keyword.directive.define", { link = "Define" })
	hi("@keyword.export", { link = "Include" })
	hi("@keyword.vim", { link = "String" })
	hi("@punctuation.delimiter", { link = "Delimiter" })
	hi("@punctuation.bracket", { link = "Delimiter" })
	hi("@punctuation.special", { link = "Special" })
	hi("@comment", { link = "Comment" })
	hi("@comment.documentation", { link = "Comment" })
	hi("@comment.error", { link = "Error" })
	hi("@comment.warning", { link = "Todo" })
	hi("@comment.hint", { link = "Comment" })
	hi("@comment.todo", { link = "Todo" })
	hi("@comment.note", { link = "Comment" })
	hi("@markup", { link = "Normal" })
	hi("@markup.strong", { link = "Bold" })
	hi("@markup.italic", { link = "Italic" })
	hi("@markup.strikethrough", { link = "Strikethrough" })
	hi("@markup.underline", { link = "Underlined" })
	hi("@markup.heading", { link = "Title" })
	hi("@markup.heading.markdown", { link = "Title" })
	hi("@markup.math", { link = "Special" })
	hi("@markup.quote", { link = "SpecialComment" })
	hi("@markup.environment", { link = "Special" })
	hi("@markup.environment.name", { link = "Special" })
	hi("@markup.link", { link = "Underlined" })
	hi("@markup.link.label", { link = "Underlined" })
	hi("@markup.link.url", { link = "Underlined" })
	hi("@markup.raw", { link = "String" })
	hi("@markup.list", { link = "Special" })
	hi("@markup.list.checked", { link = "Special" })
	hi("@markup.list.unchecked", { link = "Special" })
	hi("@diff.plus", { link = "DiffAdd" })
	hi("@diff.minus", { link = "DiffDelete" })
	hi("@diff.delta", { link = "DiffChange" })
	hi("@tag", { link = "Tag" })
	hi("@tag.builtin", { link = "Special" })
	hi("@tag.attribute", { link = "Special" })
	hi("@tag.delimiter", { link = "Delimiter" })
	hi("@error", { link = "Error" })
	hi("@function.builtin.bash", { link = "Special" })
	hi("@variable.parameter.bash", { link = "Identifier" })
	hi("@markup.heading.1.markdown", { link = "Title" })
	hi("@markup.heading.2.markdown", { link = "Title" })
	hi("@markup.heading.3.markdown", { link = "Title" })
	hi("@markup.heading.4.markdown", { link = "Title" })
	hi("@markup.heading.5.markdown", { link = "Title" })
	hi("@markup.heading.6.markdown", { link = "Title" })

	-- python
	hi("@constructor.python", { link = "Function" })
	hi("@module.python", { link = "Identifier" })
	hi("@variable.parameter.python", { link = "Normal" })
end

return M
